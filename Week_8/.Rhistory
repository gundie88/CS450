confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
vowel$Speaker <- as.numeric(vowel$Speaker)
vowel$Sex <- as.numeric(vowel$Sex)
# dmy <- dummyVars(" ~ .", data = vowel)
# vowel <- data.frame(predict(dmy, newdata = vowel))
# vowel <- vowel %>%
#   mutate(value = 1) %>%
#   spread(Sex, value,  fill = 0 ) %>%
#   mutate(value = 1) %>%
#   spread(Speaker, value,  fill = 0 )
all_rows <- 1:nrow(vowel)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- vowel[test_rows,]
# The training set contains all the other rows
vowel_train <- vowel[-test_rows,]
#Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Species~." contains a tilde character, rather than a minus
#vowel$Speaker <- as.numeric(vowel$Speaker)
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
prediction <- predict(model, vowel_train[,-ncol(vowel)])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
vowel$Speaker <- as.numeric(vowel$Speaker)
vowel$Sex <- as.numeric(vowel$Sex)
# dmy <- dummyVars(" ~ .", data = vowel)
# vowel <- data.frame(predict(dmy, newdata = vowel))
# vowel <- vowel %>%
#   mutate(value = 1) %>%
#   spread(Sex, value,  fill = 0 ) %>%
#   mutate(value = 1) %>%
#   spread(Speaker, value,  fill = 0 )
all_rows <- 1:nrow(iris)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- iris[test_rows,]
# The training set contains all the other rows
vowel_train <- iris[-test_rows,]
# Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Class~." contains a tilde character, rather than a minus
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
prediction <- predict(model, vowel_test[,-ncol(vowel)])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
vowel$Speaker <- as.numeric(vowel$Speaker)
vowel$Sex <- as.numeric(vowel$Sex)
# dmy <- dummyVars(" ~ .", data = vowel)
# vowel <- data.frame(predict(dmy, newdata = vowel))
# vowel <- vowel %>%
#   mutate(value = 1) %>%
#   spread(Sex, value,  fill = 0 ) %>%
#   mutate(value = 1) %>%
#   spread(Speaker, value,  fill = 0 )
all_rows <- 1:nrow(vowel)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- vowel[test_rows,]
# The training set contains all the other rows
vowel_train <- vowel[-test_rows,]
# Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Class~." contains a tilde character, rather than a minus
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
prediction <- predict(model, vowel_test[,-ncol(vowel)])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
# vowel$Speaker <- as.numeric(vowel$Speaker)
# vowel$Sex <- as.numeric(vowel$Sex)
dmy <- dummyVars(" ~ .", data = vowel)
vowel <- data.frame(predict(dmy, newdata = vowel))
vowel <- vowel %>%
mutate(value = 1) %>%
spread(Sex, value,  fill = 0 ) %>%
mutate(value = 1) %>%
spread(Speaker, value,  fill = 0 )
all_rows <- 1:nrow(vowel)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- vowel[test_rows,]
# The training set contains all the other rows
vowel_train <- vowel[-test_rows,]
# Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Class~." contains a tilde character, rather than a minus
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
prediction <- predict(model, vowel_test[,-ncol(vowel)])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
# vowel$Speaker <- as.numeric(vowel$Speaker)
# vowel$Sex <- as.numeric(vowel$Sex)
dmy <- dummyVars(" ~ .", data = vowel)
vowel <- data.frame(predict(dmy, newdata = vowel))
vowel <- vowel %>%
mutate(value = 1) %>%
spread(Sex, value,  fill = 0 ) %>%
mutate(value = 1) %>%
spread(Speaker, value,  fill = 0 )
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
# vowel$Speaker <- as.numeric(vowel$Speaker)
# vowel$Sex <- as.numeric(vowel$Sex)
# dmy <- dummyVars(" ~ .", data = vowel)
# vowel <- data.frame(predict(dmy, newdata = vowel))
vowel <- vowel %>%
mutate(value = 1) %>%
spread(Sex, value,  fill = 0 ) %>%
mutate(value = 1) %>%
spread(Speaker, value,  fill = 0 )
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
# vowel$Speaker <- as.numeric(vowel$Speaker)
# vowel$Sex <- as.numeric(vowel$Sex)
# dmy <- dummyVars(" ~ .", data = vowel)
# vowel <- data.frame(predict(dmy, newdata = vowel))
vowel <- vowel %>%
mutate(value = 1) %>%
spread(Sex, value,  fill = 0 ) %>%
mutate(value = 1) %>%
spread(Speaker, value,  fill = 0)
all_rows <- 1:nrow(vowel)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- vowel[test_rows,]
# The training set contains all the other rows
vowel_train <- vowel[-test_rows,]
# Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Class~." contains a tilde character, rather than a minus
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
prediction <- predict(model, vowel_test[,-ncol(vowel)])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
# vowel$Speaker <- as.numeric(vowel$Speaker)
# vowel$Sex <- as.numeric(vowel$Sex)
vowel <- vowel %>%
mutate(value = 1) %>%
spread(Sex, value,  fill = 0 ) %>%
spread(Speaker, value,  fill = 0)
all_rows <- 1:nrow(vowel)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- vowel[test_rows,]
# The training set contains all the other rows
vowel_train <- vowel[-test_rows,]
# Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Class~." contains a tilde character, rather than a minus
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
prediction <- predict(model, vowel_test[,-ncol(vowel)])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
# vowel$Speaker <- as.numeric(vowel$Speaker)
# vowel$Sex <- as.numeric(vowel$Sex)
vowel <- vowel %>%
mutate(value = 1) %>%
spread(Sex, value,  fill = 0 ) %>%
spread(Speaker, value,  fill = 0)
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
# vowel$Speaker <- as.numeric(vowel$Speaker)
# vowel$Sex <- as.numeric(vowel$Sex)
vowel <- vowel %>%
mutate(value = 1) %>%
spread(Sex, value,  fill = 0 ) %>%
mutate(value = 1) %>%
spread(Speaker, value,  fill = 0)
all_rows <- 1:nrow(vowel)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- vowel[test_rows,]
# The training set contains all the other rows
vowel_train <- vowel[-test_rows,]
# Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Class~." contains a tilde character, rather than a minus
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
prediction <- predict(model, vowel_test[,-ncol(vowel)])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
# vowel$Speaker <- as.numeric(vowel$Speaker)
# vowel$Sex <- as.numeric(vowel$Sex)
vowel <- vowel %>%
mutate(value = 1) %>%
spread(Sex, value,  fill = 0 ) %>%
mutate(value = 1) %>%
spread(Speaker, value,  fill = 0)
all_rows <- 1:nrow(vowel)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- vowel[test_rows,]
# The training set contains all the other rows
vowel_train <- vowel[-test_rows,]
# Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Class~." contains a tilde character, rather than a minus
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
prediction <- predict(model, vowel_test[,-ncol(vowel)])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
# vowel$Speaker <- as.numeric(vowel$Speaker)
# vowel$Sex <- as.numeric(vowel$Sex)
vowel <- vowel %>%
mutate(value = 1) %>%
spread(Sex, value,  fill = 0 ) %>%
mutate(value = 1) %>%
spread(Speaker, value,  fill = 0)
all_rows <- 1:nrow(vowel)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- vowel[test_rows,]
# The training set contains all the other rows
vowel_train <- vowel[-test_rows,]
# Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Class~." contains a tilde character, rather than a minus
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
prediction <- predict(model, vowel_test[,-ncol(vowel)])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
vowel$Speaker <- as.numeric(vowel$Speaker)
vowel$Sex <- as.numeric(vowel$Sex)
# vowel <- vowel %>%
#   mutate(value = 1) %>%
#   spread(Sex, value,  fill = 0 ) %>%
#   mutate(value = 1) %>%
#   spread(Speaker, value,  fill = 0)
all_rows <- 1:nrow(vowel)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- vowel[test_rows,]
# The training set contains all the other rows
vowel_train <- vowel[-test_rows,]
# Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Class~." contains a tilde character, rather than a minus
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
prediction <- predict(model, vowel_test[,-ncol(vowel)])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
# vowel$Speaker <- as.numeric(vowel$Speaker)
# vowel$Sex <- as.numeric(vowel$Sex)
vowel <- vowel %>%
mutate(value = 1) %>%
spread(Sex, value,  fill = 0 ) %>%
mutate(value = 1) %>%
spread(Speaker, value,  fill = 0)
all_rows <- 1:nrow(vowel)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- vowel[test_rows,]
# The training set contains all the other rows
vowel_train <- vowel[-test_rows,]
# Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Class~." contains a tilde character, rather than a minus
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
prediction <- predict(model, vowel_test[,-ncol(vowel)])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
View(vowel)
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
# vowel$Speaker <- as.numeric(vowel$Speaker)
# vowel$Sex <- as.numeric(vowel$Sex)
vowel <- vowel %>%
mutate(value = 1) %>%
spread(Sex, value,  fill = 0 ) %>%
mutate(value = 1) %>%
spread(Speaker, value,  fill = 0)
all_rows <- 1:nrow(vowel)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- vowel[test_rows,]
# The training set contains all the other rows
vowel_train <- vowel[-test_rows,]
# Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Class~." contains a tilde character, rather than a minus
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
#prediction <- predict(model, vowel_test[,-ncol(vowel)])
prediction <- predict(model, vowel_test[,-vowel_test$Class])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
library(e1071)
library(readr)
library(mosaic)
library(caret)
library(tidyr)
vowel <- read.csv("vowel.csv", stringsAsFactors=TRUE)
letter <- read.csv("letters.csv")
# vowel$Speaker <- as.numeric(vowel$Speaker)
# vowel$Sex <- as.numeric(vowel$Sex)
vowel <- vowel %>%
mutate(value = 1) %>%
spread(Sex, value,  fill = 0 ) %>%
mutate(value = 1) %>%
spread(Speaker, value,  fill = 0)
all_rows <- 1:nrow(vowel)
test_rows <- sample(all_rows, trunc(length(all_rows) * 0.3))
# The test set contains all the test rows
vowel_test <- vowel[test_rows,]
# The training set contains all the other rows
vowel_train <- vowel[-test_rows,]
# Train an SVM model
# Tell it the attribute to predict vs the attributes to use in the prediction,
#  the training data to use, and the kernal to use, along with its hyperparameters.
#  Please note that "Class~." contains a tilde character, rather than a minus
model <- svm(Class~., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10)
# Use the model to make a prediction on the test set
# Notice, we are not including the last column here (our target)
#prediction <- predict(model, vowel_test[,-ncol(vowel)])
prediction <- predict(model, vowel_test[,-11])
# Produce a confusion matrix
confusionMatrix <- table(pred = prediction, true = vowel_test$Class)
# Calculate the accuracy, by checking the cases that the targets agreed
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
# Print our results to the screen
print(confusionMatrix)
print(accuracy)
